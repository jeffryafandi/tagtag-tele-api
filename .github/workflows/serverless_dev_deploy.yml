name: Serverless Dev Deploy

on:
  push:
    branches:
      - dev

concurrency: 
  group: deploy-dev
  cancel-in-progress: false

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Reset dev branch
      run: |
        git fetch --all
        git reset --hard origin/dev

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build
    
    - name: Generate .env file
      run: echo "${{ secrets.DEV_ENV_FILE }}" | base64 -d > .env.development

    - name: Generate config file
      run: echo "${{ secrets.DEV_CONFIG_FILE }}" | base64 -d > config.json
    
    - name: Generate google service account file
      run: echo "${{ secrets.DEV_GOOGLE_SERVICE_ACCOUNT }}" | base64 -d > google_service_account.json
    
    - name: Generate FCM account file
      run: echo "${{ secrets.DEV_FCM_FILE }}" | base64 -d > tag-tag-680e3-21e8179796d1.json
    
    - name: Generate private pem file
      run: echo "${{ secrets.DEV_PEM_FILE }}" | base64 -d > private.pem

    - name: Generate TLS Certificate file
      run: echo "${{ secrets.TLS_CERTIFICATE }}" | base64 -d > tls.crt

    - name: Generate TLS Key file
      run: echo "${{ secrets.TLS_KEY }}" | base64 -d > tls.key

    - name: Generate Gopay CA Certificate file
      run: echo "${{ secrets.GOPAY_CA_CERTIFICATE }}" | base64 -d > gopay-root-ca-production.crt

    - name: Generate Midtrans X Signature Private Key
      run: echo "${{ secrets.DEV_MIDTRANS_X_SIGNATURE_PRIVATE_KEY }}" | base64 -d > midtrans-x-signature-private-key.pem

    - name: Generate Midtrans X Signature Public Key
      run: echo "${{ secrets.DEV_MIDTRANS_X_SIGNATURE_PUBLIC_KEY }}" | base64 -d > midtrans-x-signature-public-key.pem

    - name: Deploying Serverless Apps
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: | 
        npx serverless deploy --config ./serverless-app.yml --stage development
  deploy-queue:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Reset dev branch
      run: |
        git fetch --all
        git reset --hard origin/dev

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build
    
    - name: Generate .env file
      run: echo "${{ secrets.DEV_ENV_FILE }}" | base64 -d > .env.development

    - name: Generate config file
      run: echo "${{ secrets.DEV_CONFIG_FILE }}" | base64 -d > config.json
    
    - name: Generate google service account file
      run: echo "${{ secrets.DEV_GOOGLE_SERVICE_ACCOUNT }}" | base64 -d > google_service_account.json

    - name: Deploying Serverless Apps
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: | 
        npx serverless deploy --config ./serverless-queue.yml --stage development
  deploy-scheduler:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Reset dev branch
      run: |
        git fetch --all
        git reset --hard origin/dev

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build
    
    - name: Generate .env file
      run: echo "${{ secrets.DEV_ENV_FILE }}" | base64 -d > .env.development

    - name: Generate config file
      run: echo "${{ secrets.DEV_CONFIG_FILE }}" | base64 -d > config.json
    
    - name: Generate google service account file
      run: echo "${{ secrets.DEV_GOOGLE_SERVICE_ACCOUNT }}" | base64 -d > google_service_account.json

    - name: Deploying Serverless Apps
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: | 
        npx serverless deploy --config ./serverless-scheduler.yml --stage development
  deploy-admin:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Reset dev branch
      run: |
        git fetch --all
        git reset --hard origin/dev

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build
    
    - name: Generate .env file
      run: echo "${{ secrets.DEV_ENV_FILE }}" | base64 -d > .env.development

    - name: Generate config file
      run: echo "${{ secrets.DEV_CONFIG_FILE }}" | base64 -d > config.json
    
    - name: Generate google service account file
      run: echo "${{ secrets.DEV_GOOGLE_SERVICE_ACCOUNT }}" | base64 -d > google_service_account.json

    - name: Deploying Serverless Apps
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: | 
        npx serverless deploy --config ./serverless-admin.yml --stage development
