name: Serverless Pre Prod Deploy

on:
  push:
    branches:
      - preprod

concurrency: 
  group: deploy-preprod
  cancel-in-progress: false

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Reset preprod branch
      run: |
        git fetch --all
        git reset --hard origin/preprod

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build
    
    - name: Generate .env file
      run: echo "${{ secrets.PREPROD_ENV_FILE }}" | base64 -d > .env.preprod
    
    - name: Generate google service account file
      run: echo "${{ secrets.PREPROD_GOOGLE_SERVICE_ACCOUNT }}" | base64 -d > google_service_account.json

    - name: Deploying Serverless Apps
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: | 
        npx serverless deploy --config ./serverless-app.yml --stage preprod
  deploy-queue:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Reset preprod branch
      run: |
        git fetch --all
        git reset --hard origin/preprod

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build
    
    - name: Generate .env file
      run: echo "${{ secrets.PREPROD_ENV_FILE }}" | base64 -d > .env.preprod
    
    - name: Generate google service account file
      run: echo "${{ secrets.PREPROD_GOOGLE_SERVICE_ACCOUNT }}" | base64 -d > google_service_account.json

    - name: Deploying Serverless Apps
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: | 
        npx serverless deploy --config ./serverless-queue.yml --stage preprod
  deploy-scheduler:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Reset preprod branch
      run: |
        git fetch --all
        git reset --hard origin/preprod

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build
    
    - name: Generate .env file
      run: echo "${{ secrets.PREPROD_ENV_FILE }}" | base64 -d > .env.preprod
    
    - name: Generate google service account file
      run: echo "${{ secrets.PREPROD_GOOGLE_SERVICE_ACCOUNT }}" | base64 -d > google_service_account.json

    - name: Deploying Serverless Apps
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: | 
        npx serverless deploy --config ./serverless-scheduler.yml --stage preprod
  deploy-admin:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Reset preprod branch
      run: |
        git fetch --all
        git reset --hard origin/preprod

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build
    
    - name: Generate .env file
      run: echo "${{ secrets.PREPROD_ENV_FILE }}" | base64 -d > .env.preprod
    
    - name: Generate google service account file
      run: echo "${{ secrets.PREPROD_GOOGLE_SERVICE_ACCOUNT }}" | base64 -d > google_service_account.json

    - name: Deploying Serverless Apps
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: | 
        npx serverless deploy --config ./serverless-admin.yml --stage preprod
